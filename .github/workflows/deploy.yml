name: Deploy Board Game WebApp Infrastructure

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    environment:
      name: production

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Install Required Packages
      - name: Install Required Packages
        run: |
          sudo apt-get update
          sudo apt-get install -y curl unzip

      # Step 3: Install OWASP Dependency-Check
      - name: Install OWASP Dependency-Check
        run: |
          curl -L -o dependency-check.zip https://github.com/jeremylong/DependencyCheck/releases/download/v8.4.0/dependency-check-8.4.0-release.zip
          unzip dependency-check.zip
          sudo mv dependency-check /opt/dependency-check

      # Step 4: Run OWASP Dependency-Check
      - name: Run OWASP Dependency-Check
        run: |
          /opt/dependency-check/bin/dependency-check.sh \
            --project "BoardGameListingApp" \
            --scan ./BoardGame \
            --disableAssembly \
            --format HTML \
            --out dependency-check-report

      # Step 5: Upload Dependency-Check Report
      - name: Upload Dependency-Check Report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: dependency-check-report

      # Step 6: Run Trivy File System Vulnerability Scan
      - name: Run Trivy File System Vulnerability Scan
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
          trivy fs --severity CRITICAL,HIGH .

      # Step 7: Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Step 8: Set up Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7

      # Step 9: Terraform Init
      - name: Terraform Init
        run: terraform init

      # Step 10: Terraform Plan
      - name: Terraform Plan
        run: terraform plan

      # Step 11: Debugging Secrets (Check values of SONAR_ORG and SONAR_PROJECT_KEY)
      - name: Debug Secrets (Test)
        run: |
          echo "Organization: ${{ secrets.SONAR_ORGANIZATION }}"
          echo "Project Key: ${{ secrets.SONAR_PROJECT_KEY }}"

      # Step 12: Install SonarScanner
      - name: Install SonarScanner
        run: |
          curl -sSLo sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.7.0.2747-linux.zip
          unzip sonar-scanner.zip -d $HOME/sonar-scanner
          echo "$HOME/sonar-scanner/sonar-scanner-4.7.0.2747-linux/bin" >> $GITHUB_PATH

      # Step 13: SonarCloud Scan
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2.2.0
        with:
          projectBaseDir: ./BoardGame
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_ORGANIZATION: "kuldeepawar"
          SONAR_PROJECT_KEY: "kuldeepawar_Automating-Secure-Deployment-of-Board-game-Listing-WebApp-on-AWS"

      # Step 14: Terraform Apply
      - name: Terraform Apply
        run: terraform apply -auto-approve

      # Step 15: Deploy Spring Boot App via SSH
      - name: Deploy App to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script_stop: true
          timeout: 10m
          script: |
            echo "Starting Deployment on EC2..."

            # Ensure required packages are installed
            sudo yum update -y
            sudo yum install -y git java-17-openjdk maven

            # Clone or update the repo
            cd /home/ec2-user
            if [ ! -d "app" ]; then
              git clone https://github.com/DevOpsInstituteMumbai-wq/Automating-Secure-Deployment-of-Board-game-Listing-WebApp-on-AWS.git app
            else
              cd app
              git pull
            fi

            # Build the Spring Boot App
            cd /home/ec2-user/app/BoardGame
            mvn clean package -DskipTests

            # Kill any existing app process
            pkill -f 'java -jar' || true

            # Start the app in background
            nohup java -jar target/*.jar > app.log 2>&1 &

            # Wait and verify the app is running
            sleep 20
            if curl -sSf http://localhost:8080 > /dev/null; then
              echo "✅ App started successfully!"
            else
              echo "❌ App failed to start!"
              exit 1
            fi
